apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubediag-master
  namespace: kubediag
  labels:
    control-plane: kubediag
    mode: master
spec:
  selector:
    matchLabels:
      control-plane: kubediag
      mode: master
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        control-plane: kubediag
        mode: master
    spec:
      containers:
      - command:
        - /kubediag
        args:
        - --mode=master
        - --bind-address=$(POD_IP)
        - --port=8089
        - --metrics-port=10357
        - --enable-leader-election=true
        - --repeat-interval=5m
        image: hub.c.163.com/kubediag/kubediag:v0.3.0
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        name: kubediag
        ports:
        - containerPort: 10357
          name: metrics
        - containerPort: 8089
          name: http
        resources:
          limits:
            cpu: 400m
            memory: 400Mi
          requests:
            cpu: 100m
            memory: 100Mi
        securityContext:
          privileged: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      hostPID: true
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
      serviceAccountName: kubediag
      terminationGracePeriodSeconds: 10
      tolerations:
      - operator: Exists
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: kubediag
    mode: master
  name: kubediag-master
  namespace: kubediag
spec:
  ports:
  - name: http
    port: 8089
    targetPort: http
  selector:
    control-plane: kubediag
    mode: master
  type: ClusterIP
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kubediag-agent
  namespace: kubediag
  labels:
    control-plane: kubediag
    mode: agent
spec:
  selector:
    matchLabels:
      control-plane: kubediag
      mode: agent
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 5
    type: RollingUpdate
  template:
    metadata:
      labels:
        control-plane: kubediag
        mode: agent
    spec:
      containers:
      - command:
        - /kubediag
        args:
        - --mode=agent
        - --bind-address=$(POD_IP)
        - --port=8090
        - --metrics-port=10355
        - --data-root=/var/lib/kubediag
        - --node-name=$(NODE_NAME)
        image: hub.c.163.com/kubediag/kubediag:v0.2.2
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        name: kubediag
        ports:
        - containerPort: 10355
          name: metrics
        - containerPort: 8090
          name: http
        resources:
          limits:
            cpu: 2000m
            memory: 4Gi
          requests:
            cpu: 100m
            memory: 100Mi
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /var/run/docker.sock
          name: docker-sock
        - mountPath: /var/run/docker
          name: docker-exec-root
        - mountPath: /var/lib/docker
          name: docker-data-root
        - mountPath: /var/lib/kubelet
          name: kubelet-data
        - mountPath: /usr/local/bin/
          name: usr-local-bin
        - mountPath: /var/lib/kubediag
          name: kubediag-data
        - mountPath: /var/lib/kubediag/function-main
          name: function-main
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: docker-sock
        hostPath:
          path: /var/run/docker.sock
          type: Socket
      - name: docker-exec-root
        hostPath:
          path: /var/run/docker
          type: Directory
      - name: docker-data-root
        hostPath:
          path: /var/lib/docker
          type: Directory
      - name: kubelet-data
        hostPath:
          path: /var/lib/kubelet
          type: Directory
      - name: kubediag-data
        hostPath:
          path: /var/lib/kubediag
          type: DirectoryOrCreate
      - name: usr-local-bin
        hostPath:
          path: /usr/local/bin
          type: DirectoryOrCreate
      - name: function-main
        configMap:
          name: function-main
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      hostPID: true
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
      serviceAccountName: kubediag
      terminationGracePeriodSeconds: 10
      tolerations:
      - operator: Exists
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: function-main
  namespace: kubediag
data:
  python3: |
    import sys
    import json
    from function import handler


    def main():
        # The last argument is the context in json format.
        context_string = sys.argv[-1]
        context = json.loads(context_string)

        # Call user defined handler.
        result = handler(context)

        # Serialize result from user defined handler to a json formatted string.
        json_object = json.dumps(result)
        print("\n"+json_object)


    if __name__ == "__main__":
        sys.exit(main())
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubediag
  namespace: kubediag
